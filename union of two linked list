
#include<bits/stdc++.h>
using namespace std;
struct node
{
	int data;
	struct node* next;
};
void printList(struct node *node)
{
    while(node!=NULL){
        cout<<node->data<<' ';
        node = node->next;
    }
    printf("
");
}
void push(struct node** head_ref, int new_data)
{
    struct node* new_node =	(struct node*) malloc(sizeof(struct node));
    new_node->data = new_data;
    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}
struct node* makeUnion(struct node* head1, struct node* head2);
int main()
{
    long test;
    cin>>test;
    while(test--)
    {
        struct node* a = NULL;
        struct node* b = NULL;
        int n, m, tmp;
        cin>>n;
        for(int i=0; i<n; i++)
        {
            cin>>tmp;
            push(&a, tmp);
        }
        cin>>m;
        for(int i=0; i<m; i++)
        {
            cin>>tmp;
            push(&b, tmp);
        }
        printList(makeUnion(a, b));
    }
    return 0;
}

int isPresent (struct node *head, int data) ;
struct node* makeUnion(struct node* head1, struct node* head2)
{
    struct node *temp1=head1,*temp2=head2,*temp3=NULL;
    while(temp1!=NULL)
    {
        push(&temp3,temp1->data);
        temp1=temp1->next;
    }
     while(temp2!=NULL)
     {
         if(!isPresent(temp3,temp2->data))
         {
             push(&temp3,temp2->data);
         }
         temp2=temp2->next;
     }
     return temp3;
}
int isPresent (struct node *head, int data) 
{ 
    struct node *t = head; 
    while (t != NULL) 
    { 
        if (t->data == data) 
            return 1; 
        t = t->next; 
    } 
    return 0; 
} 
