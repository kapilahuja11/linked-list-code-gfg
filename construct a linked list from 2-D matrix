#include <bits/stdc++.h>
#define MAX 20
using namespace std;
struct Node
{
	int data;
	Node* right, *down;
};
void display(Node* head)
{
    Node* Rp;
	Node* Dp = head;
	while (Dp) {
		Rp = Dp;
		while (Rp) {
			cout << Rp->data << " ";
			Rp = Rp->right;
		}
		//cout << "";
		Dp = Dp->down;
	}
}
Node* constructLinkedMatrix(int mat[MAX][MAX], int n);
// driver program
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        int mat[MAX][MAX];
        for(int i=0; i<n; i++)
            for(int j=0; j<n; j++)
                cin>>mat[i][j];
        Node* head = constructLinkedMatrix(mat, n);
        if(!head)cout<<"-1";
	    else display(head);
	    cout<<"";
    }
	return 0;
}

}
/*This is a function problem.You only need to complete the function given below*/
/*structure of the node of the linked list is as
struct Node
{
	int data;
	Node* right, *down;
};*/
// n is the size of the matrix
// function must return the pointer to the first element 
// of the in linked list i.e. that should be the element at arr[0][0]
Node* constructLinkedMatrix(int mat[MAX][MAX], int n)
{
    // code here
    int i,j;
    Node *head,*dhead,*rp,*dp;
    for(i=0;i<n;i++)
     {
         for(j=0;j<n;j++)
          {
              Node *temp = (Node *)malloc(sizeof(Node));
              temp->data=mat[i][j];
              temp->right=NULL;
              temp->down=NULL;
              if(i==0 && i==j)
               head=dhead=rp=temp;
              else if(j==0)
               {
                   dhead->down=temp;
                   rp=dhead->down;
                   dp=dhead->right;
                   dhead=temp;
               }
              else
               {
                   rp->right=temp;
                   rp=temp;
                   if(i!=0)
                    {
                       dp->down=temp;
                       dp=dp->right; 
                    }
               }
          }
         
     }
    return head; 
}
